plugins {
    id "io.spring.dependency-management" version "1.0.3.RELEASE"
    id 'org.hidetake.ssh' version '2.9.0'
}

repositories { 
    maven { url "https://repo1.maven.org/maven2/" }
    // awslabs
    maven { url 'https://jitpack.io' }
}

def buildNumber = '0.1.00'
def buildId = new Date().format('yyyy-MM-dd_hh-mm-ss')
def warFile = "GUS_${buildNumber}.war"
def parallelForks = "$System.env.PARALLEL_FORKS" == 'null' ? Runtime.getRuntime().availableProcessors() : Integer.valueOf("$System.env.PARALLEL_FORKS").intValue();
def testSingle = System.getProperty("test.single") == null ? '**/*Test*.class' : '**/' + System.getProperty("test.single") + '*.class'
def forkEveryTest = 1

configurations {
    perJvmTestCompile.extendsFrom testCompile
    perJvmTestRuntime.extendsFrom testRuntime
    ssh
    datapimp
    cucumber
}

apply plugin: 'eclipse'
apply plugin: 'java'
apply plugin: 'war'
apply plugin: 'io.spring.dependency-management'
apply from: 'gradle/notification.gradle'
apply from: 'gradle/dependencies.gradle'

dependencyManagement {
    imports {
        mavenBom "com.amazonaws:aws-java-sdk-bom:${awsSdkVersion}"
    }
}

sourceSets {
    main {
        java {
            srcDir 'src'
        }
        resources {
            srcDir 'src'
            include 'com/gus/**/*.properties'
            include 'com/gus/**/*.txt'
            include 'com/gus/**/*.sql'
        }
    }
    test {
        java {
            srcDir 'test'
        }
    }

    perJvmTest {
        java {
            srcDir 'test'
            compileClasspath += main.output + test.output
            runtimeClasspath += main.output + test.output
        }
    }
    
    minefieldJar {
        java {
            srcDir 'src'
            include 'com/gus/minefield/*.java'
            compileClasspath += main.output
        }
        resources {
            srcDir 'src'
            include 'com/gus/minefield/*.txt'
        }
    }
}

eclipse {
    classpath {
        plusConfigurations += [
            configurations.perJvmTestCompile,
            configurations.cucumber
        ]
        
    }
}


task cleanGenerated(type: Delete) {
    group 'Build'
    description 'Clean any directories and folders outside the build directory'
    delete 'generated_src'
}

clean.dependsOn cleanGenerated

task copyResourceFiles(type: Copy) {
    includeEmptyDirs false
    from 'src'
    into "${project.buildDir}/resources"
    include '**/*.txt'
    include '**/*.sql'
    include '**/*.json'
    include '**/*.properties'
    include '**/*.ttf'
    include '**/*.svg'
    include '**/*.csv'
    include '**/innotas.io.crt'
    include '**/innotas.io.key'
    include '**/dev-rnd-projectplace-com-ies.crt'
    include '**/.keystore'
    exclude 'com/innotas/font/roboto/src/*'
}

task copyResourceTestFiles(type: Copy) {
    includeEmptyDirs false
    from 'test'
    into "${project.buildDir}/resources/test"
    include '**/*.txt'
    include '**/*.sql'
}

task perJvmTest(type: Test) {
    jvmArgs "-Dapple.awt.UIElement=true"
    description 'Run per JVM unit tests separate from other unit tests (slow)'
    configurations.perJvmTestRuntime
    testClassesDirs = sourceSets.perJvmTest.output.classesDirs
    classpath =  sourceSets.perJvmTest.runtimeClasspath
    include testSingle
    forkEvery 1
    maxParallelForks parallelForks
}

task copyCompileLibs(type: Copy) {
    into file("${project.buildDir}/lib/compile")
    from configurations.compile
}

task copyRuntimeLibs(type: Copy) {
    into file("${project.buildDir}/lib/runtime")
    from configurations.runtime
}

task copyTestCompileLibs(type: Copy) {
    into file("${project.buildDir}/lib/test-compile")
    from configurations.testCompile
}

task copyTestCucumberLibs(type: Copy) {
    into file("${project.buildDir}/lib/test-compile")
    from configurations.cucumber
}

task copyTestPerJvmLibs(type: Copy) {
    into file("${project.buildDir}/lib/test-compile")
    from configurations.perJvmTestCompile
}

task deleteAggregateLibs(type: Delete) {
    delete fileTree("${project.buildDir}/lib")
}

tasks.withType(JavaCompile) {
    // We want to use UTF-8 encoding on all javac invocations.  This is not the default on Windows machines.
    options.encoding = "UTF-8"
}
tasks.withType(Javadoc) {
    // We want to use UTF-8 encoding on all javac invocations.  This is not the default on Windows machines.
    options.encoding = "UTF-8"
}


task copyLibs(dependsOn: [
        'copyCompileLibs',
        'copyRuntimeLibs',
        'copyTestCompileLibs',
        'copyTestCucumberLibs',
        'copyTestPerJvmLibs'
]) {
}

// Set up compile to depend on delete and rest to depend on compile so that delete is done first
copyCompileLibs.dependsOn deleteAggregateLibs
copyRuntimeLibs.dependsOn copyCompileLibs
copyTestCompileLibs.dependsOn copyCompileLibs
copyTestCucumberLibs.dependsOn copyCompileLibs
copyTestPerJvmLibs.dependsOn copyCompileLibs

compileJava {
    options.fork = true  // Fork our compilation into a child process
    options.forkOptions.setMemoryMaximumSize("2g") // Set maximum memory to 2g
}

compileJava.dependsOn copyResourceFiles
compileTestJava.dependsOn copyResourceTestFiles
test.dependsOn perJvmTest

def generatedSrc = "${project.buildDir}/generated_src"

task prepareGeneratedSrcDir {
    doLast {
        project.file(generatedSrc).mkdirs()
    }
}


task createDatapimpJar(type: Jar) {
    description 'Create DataPimp jar'
    group 'build'
    from sourceSets.main.output
    from {
        configurations.datapimp.collect {
            it.isDirectory() ? it : zipTree(it)
        }
    }
    destinationDir = file("${project.buildDir}/tools")
    archiveName 'datapimp.jar'
    manifest {
        attributes(
                'Main-Class': 'com.innotas.tools.datapimp.Main'
                )
    }
}

javadoc { failOnError false }

task listJars(dependsOn: [
    'listCompileJars',
    'listTestJars'
])

task listCompileJars {
    doLast {
        println '=== compile jars ==='
        configurations.compile.each { File file ->
            println file.name
        }
    }
}

task listTestJars {
    doLast {
        println '=== test jars ==='
        configurations.perJvmTestCompile.each { File file ->
            println file.name
        }
    }
}

task createMinefieldJar(type: Jar) {
    description 'Minefield jar'
    group 'build'
    from sourceSets.minefieldJar.output
    destinationDir = file("${project.buildDir}")
    archiveName 'minefield.jar'
    manifest {
        attributes(
                'Main-Class': 'com.gus.minefield.MinefieldApp'
                )
    }
}

test {
    jvmArgs "-Dapple.awt.UIElement=true"
    include '**/*Test*.class'
    exclude '**/*Testing*.class'
    exclude '**/*TestAsyncJob.class'
    forkEvery forkEveryTest
    maxParallelForks parallelForks
}


war {
    from "${project.buildDir}/web"
    rootSpec.exclude 'com/gus/tools'
    webInf { from 'web/WEB-INF/web.xml' }
    destinationDir = file("${project.buildDir}")
    zip64 = true
    archiveName "${warFile}"
}
